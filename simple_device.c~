#include <linux/init.h>    
#include <linux/module.h>
#include <linux/kernel.h>   
#include <linux/fs.h>       //contains data structures such as the file_operations structure
#include <linux/uaccess.h>  //allows you to write to user space.

#define DEVICE_NAME "simple"

static int dev_open(struct inode*, struct file*);           //These are in the fs.h folder
static int dev_release(struct inode*, struct file*);
static ssize_t dev_read(struct file*, char*, size_t, loff_t*);
static ssize_t dev_write(struct file*, const char*, size_t, loff_t*);

static struct file_operations fops = {
    //Defines the file operations for the device driver, from fs.h
   .open = dev_open,
   .read = dev_read,
   .write = dev_write,
   .release = dev_release,
};


//Need: dev_t for registration.
//





static int major;

static int simple_init(void) {
    major = register_chrdev(0, DEVICE_NAME, &fops);   //This is old code

    if (major < 0) {
        printk("Device load failed\n");
        return major;
    }

    printk("Module has been loaded: %d\n", major);
    return 0;
}

static void simple_exit(void) {
    unregister_chrdev(major, DEVICE_NAME);          //also old (replace)
    printk("Module has been unloaded\n");
    
    return;
}


//When device is opened
static int dev_open(struct inode *inodep, struct file *filep) {
   printk(KERN_INFO "Device opened\n");
   return 0;
}



//when you try to write to the device
static ssize_t dev_write(struct file *filep, const char *buffer,
                         size_t len, loff_t *offset) {

   printk("Sorry, rickroll is read only\n");
   return 0;
}

//when you close the device
static int dev_release(struct inode *inodep, struct file *filep) {
   printk("Rickroll device closed\n");
   return 0;
}

//when you read from the device
static ssize_t dev_read(struct file *filep, char *buffer, size_t len, loff_t *offset) {
    int errors = 0;
    char *message = "Reading ";
    int message_len = strlen(message);

    errors = copy_to_user(buffer, message, message_len);

    return 0;
}

module_init(simple_init);
module_exit(simple_exit);
